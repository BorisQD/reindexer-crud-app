//go:build go1.22

// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Atom defines model for Atom.
type Atom struct {
	// Id UUID
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// Item defines model for Item.
type Item struct {
	// CreatedAt Item creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// Id Auto-generated UUID
	Id openapi_types.UUID `json:"id"`

	// Name Item name
	Name    string    `json:"name"`
	Related *[]Nested `json:"related,omitempty"`

	// UpdatedAt Item last update timestamp
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ItemCreate defines model for ItemCreate.
type ItemCreate struct {
	// Name Item name
	Name    string    `json:"name"`
	Related *[]Nested `json:"related,omitempty"`
}

// ItemUpdate defines model for ItemUpdate.
type ItemUpdate struct {
	// Name Item name
	Name    string   `json:"name"`
	Related []Nested `json:"related"`
}

// Nested defines model for Nested.
type Nested struct {
	// Id UUID
	Id      openapi_types.UUID `json:"id"`
	Name    string             `json:"name"`
	Related *[]Atom            `json:"related,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Data Response data
	Data    *map[string]interface{} `json:"data,omitempty"`
	Message *string                 `json:"message,omitempty"`
}

// LimitQueryParameter defines model for LimitQueryParameter.
type LimitQueryParameter = int

// OffsetQueryParameter defines model for OffsetQueryParameter.
type OffsetQueryParameter = int

// UUIDPathParameter defines model for UUIDPathParameter.
type UUIDPathParameter = openapi_types.UUID

// BadRequest defines model for BadRequest.
type BadRequest = ErrorResponse

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// GetItemsParams defines parameters for GetItems.
type GetItemsParams struct {
	// Limit Number of items to return
	Limit int `form:"limit" json:"limit"`

	// Offset Number of items to skip for pagination
	Offset int `form:"offset" json:"offset"`
}

// PostItemsJSONRequestBody defines body for PostItems for application/json ContentType.
type PostItemsJSONRequestBody = ItemCreate

// PutItemsIdJSONRequestBody defines body for PutItemsId for application/json ContentType.
type PutItemsIdJSONRequestBody = ItemUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// Get all items
	// (GET /items)
	GetItems(w http.ResponseWriter, r *http.Request, params GetItemsParams)
	// Create a new item
	// (POST /items)
	PostItems(w http.ResponseWriter, r *http.Request)
	// Get item by ID
	// (GET /items/{id})
	GetItemsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update item
	// (PUT /items/{id})
	PutItemsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Live check
	// (GET /live)
	GetLive(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItems operation middleware
func (siw *ServerInterfaceWrapper) GetItems(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetItemsParams

	// ------------- Required query parameter "limit" -------------

	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "limit"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Required query parameter "offset" -------------

	if paramValue := r.URL.Query().Get("offset"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "offset"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItems(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostItems operation middleware
func (siw *ServerInterfaceWrapper) PostItems(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostItems(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetItemsId operation middleware
func (siw *ServerInterfaceWrapper) GetItemsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetItemsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutItemsId operation middleware
func (siw *ServerInterfaceWrapper) PutItemsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutItemsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLive operation middleware
func (siw *ServerInterfaceWrapper) GetLive(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLive(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.GetHealth)
	m.HandleFunc("GET "+options.BaseURL+"/items", wrapper.GetItems)
	m.HandleFunc("POST "+options.BaseURL+"/items", wrapper.PostItems)
	m.HandleFunc("GET "+options.BaseURL+"/items/{id}", wrapper.GetItemsId)
	m.HandleFunc("PUT "+options.BaseURL+"/items/{id}", wrapper.PutItemsId)
	m.HandleFunc("GET "+options.BaseURL+"/live", wrapper.GetLive)

	return m
}

type BadRequestJSONResponse ErrorResponse

type InternalServerErrorJSONResponse ErrorResponse

type NotFoundJSONResponse ErrorResponse

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse struct {
	Status  *string `json:"status,omitempty"`
	Version *string `json:"version,omitempty"`
}

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth503JSONResponse struct {
	Error  *string `json:"error,omitempty"`
	Status *string `json:"status,omitempty"`
}

func (response GetHealth503JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsRequestObject struct {
	Params GetItemsParams
}

type GetItemsResponseObject interface {
	VisitGetItemsResponse(w http.ResponseWriter) error
}

type GetItems200JSONResponse struct {
	Items []Item `json:"items"`
	Total *int   `json:"total,omitempty"`
}

func (response GetItems200JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItems500JSONResponse ErrorResponse

func (response GetItems500JSONResponse) VisitGetItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostItemsRequestObject struct {
	Body *PostItemsJSONRequestBody
}

type PostItemsResponseObject interface {
	VisitPostItemsResponse(w http.ResponseWriter) error
}

type PostItems200JSONResponse Item

func (response PostItems200JSONResponse) VisitPostItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostItems400JSONResponse ErrorResponse

func (response PostItems400JSONResponse) VisitPostItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostItems500JSONResponse ErrorResponse

func (response PostItems500JSONResponse) VisitPostItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetItemsIdResponseObject interface {
	VisitGetItemsIdResponse(w http.ResponseWriter) error
}

type GetItemsId200JSONResponse Item

func (response GetItemsId200JSONResponse) VisitGetItemsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsId400JSONResponse ErrorResponse

func (response GetItemsId400JSONResponse) VisitGetItemsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsId404JSONResponse ErrorResponse

func (response GetItemsId404JSONResponse) VisitGetItemsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetItemsId500JSONResponse ErrorResponse

func (response GetItemsId500JSONResponse) VisitGetItemsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutItemsIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PutItemsIdJSONRequestBody
}

type PutItemsIdResponseObject interface {
	VisitPutItemsIdResponse(w http.ResponseWriter) error
}

type PutItemsId200JSONResponse Item

func (response PutItemsId200JSONResponse) VisitPutItemsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutItemsId400JSONResponse ErrorResponse

func (response PutItemsId400JSONResponse) VisitPutItemsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutItemsId404JSONResponse ErrorResponse

func (response PutItemsId404JSONResponse) VisitPutItemsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutItemsId500JSONResponse ErrorResponse

func (response PutItemsId500JSONResponse) VisitPutItemsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLiveRequestObject struct {
}

type GetLiveResponseObject interface {
	VisitGetLiveResponse(w http.ResponseWriter) error
}

type GetLive200JSONResponse struct {
	Status  *string `json:"status,omitempty"`
	Version *string `json:"version,omitempty"`
}

func (response GetLive200JSONResponse) VisitGetLiveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Health check
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Get all items
	// (GET /items)
	GetItems(ctx context.Context, request GetItemsRequestObject) (GetItemsResponseObject, error)
	// Create a new item
	// (POST /items)
	PostItems(ctx context.Context, request PostItemsRequestObject) (PostItemsResponseObject, error)
	// Get item by ID
	// (GET /items/{id})
	GetItemsId(ctx context.Context, request GetItemsIdRequestObject) (GetItemsIdResponseObject, error)
	// Update item
	// (PUT /items/{id})
	PutItemsId(ctx context.Context, request PutItemsIdRequestObject) (PutItemsIdResponseObject, error)
	// Live check
	// (GET /live)
	GetLive(ctx context.Context, request GetLiveRequestObject) (GetLiveResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(w http.ResponseWriter, r *http.Request) {
	var request GetHealthRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx, request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		if err := validResponse.VisitGetHealthResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetItems operation middleware
func (sh *strictHandler) GetItems(w http.ResponseWriter, r *http.Request, params GetItemsParams) {
	var request GetItemsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetItems(ctx, request.(GetItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetItemsResponseObject); ok {
		if err := validResponse.VisitGetItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostItems operation middleware
func (sh *strictHandler) PostItems(w http.ResponseWriter, r *http.Request) {
	var request PostItemsRequestObject

	var body PostItemsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostItems(ctx, request.(PostItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostItems")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostItemsResponseObject); ok {
		if err := validResponse.VisitPostItemsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetItemsId operation middleware
func (sh *strictHandler) GetItemsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetItemsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetItemsId(ctx, request.(GetItemsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItemsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetItemsIdResponseObject); ok {
		if err := validResponse.VisitGetItemsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutItemsId operation middleware
func (sh *strictHandler) PutItemsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request PutItemsIdRequestObject

	request.Id = id

	var body PutItemsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutItemsId(ctx, request.(PutItemsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutItemsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutItemsIdResponseObject); ok {
		if err := validResponse.VisitPutItemsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLive operation middleware
func (sh *strictHandler) GetLive(w http.ResponseWriter, r *http.Request) {
	var request GetLiveRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLive(ctx, request.(GetLiveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLive")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLiveResponseObject); ok {
		if err := validResponse.VisitGetLiveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY23LbNhN+FQz+/5KS6FPd6qpO0qaaySSuXfcm4+msyKWEhAAYYOlY4+G7dwBSFGlB",
	"BzuJ48z0ThQXe/z2WyzveKJloRUqsnx8xwswIJHQ+Kc3Qgr6s0SzOF/+7/5O0SZGFCS04mP+tpRTNExn",
	"TBBKy0gzg1QaxSMunMAnp4BHXIFEPua5U8ojbpM5SnD6JNwKWUo+PojjOOJSqOYx4rQo3BmhCGdoeFVF",
	"/F2WWXyMV/ajKDb4pL3OvlNLL+KgF1dXk1fnQPMtLlyg1aVJkDnZpeECaL6yK1IecYOfSmEw5WMyJXZ9",
	"yLSRQHzMy9JLNn5YMkLNeOX8MGgLrSz6er2A9AI/lWjJPSVaESr/E4oiFwk4x0YfrPPurmPm/wYzPub/",
	"G62wMKrf2tFvxmhz0RipTfajfAEpM7VRNmBC3UAuUiZUURLroKmK+EQRGgX5JZobNF7x07m5NM6st87Q",
	"m68i/lbT77pU6dO58tccmS0wEZlAl7sGJZ/BMqWJZd4bd6zR6AyekZa+P40u0JCo6y3SddQ1YNsBnSUC",
	"79Yw1cXj+xqgXvS61aGnHzAhp6Mf6pp7uCwx3oIscnd2Qig7UUYB82tW3Jl15YlBIEz/AVrPgbfiBYRW",
	"jIRESyCLblpSIBy4N6HchPJ6VpIezFChcWbZQ9MccNC/ChwxmDsTvsCOu3YB7i1aJ75KHRgDC/dcFun2",
	"HOVgidVSD07TRqRE3dpcbyjoSy+yXtbd+ZJw+wbVjOZ8fHhy4sfF8vngG2bzXrgbe8K5euUz+oMHt9Ie",
	"CrPR9BSU9PAwPVvuCnI7tV2WSYLWbia3FAiCM9/LM/86oFeitTDDPiu+KxyrOK5yweToCMbWDmRlni/2",
	"4Un3l1CZXs4xSHzTowSRu4NlUWhDvzZGh4mWq2vI2fmEXdYCfG1cnbVOsZcXV6+YE860ae5VEhTMULqp",
	"GXES5OO5QKFSvEXTnuARv0Fja40Hw3gYO0O6QAWF4GN+NIyHRzzy1yOf3tEcIXewv+MzDNDX32hEtmA0",
	"R+8QqNSnfAoWWaKVwsTn0xJQabk3Vad4kvIxf430R63/3g3qMI4fdBHoY6Kx1qttHccihPc2I135w+HB",
	"yTDet+L3SnU+YcKypckq4ifx0RfEExjgoSRnIHIMdnQoIaXamJIHxLjS4m9KpZRgFnzM67KyZI7JR2cA",
	"ZtY1e1Ptayc8ajkkiKwLJCPwBhmwAmZC+XGfC0tumYA8r4EfgtSkedFdot5/rXVp85bwoPVpzz3Jd3gT",
	"vhPcsTZtcW7bGnX9VbuvLeteM8LfKgN3JtIEeWcKdZe+3vjwRq73QOxly+SshUzdm/F33396vfMaqQfw",
	"ZfM0oVYRL7QNdEx9l2PAFH72h9lnQXMGwRtzv2vOtW3bptkiX+h08dXy0rlqVv0KOqBWX4i/3fgKFKLd",
	"Te4P+Srix08JiS2b+7OE5xrMAhBt6X10J9JqH45vNvGkBu50wQTZMFaXDD9Jd3G8r/Gjv/qsRmV2fArJ",
	"QTwdnPycJIPjo9PDAZz8dDqIMT6cHiZH6fHpL7sv1l9Ms4+B+SbSO35aVNWYdqVgTZa8D8dP6EP/i8dz",
	"5f0l+j1mA8RfBrqoXnMZKIa3wpJQs1ZNmOzLH7mBvs1waj4VPKfh1Hw1+r7DKdC6TBs2Xc2s/zp5vZOb",
	"jtwyHHNxg/su1ZuX5zdOyzdanbetyY/fF8EH3s+Wi2LLpli1fwbpafXlYzXhbIejfNLXF67ugspQpYUW",
	"ijrnGvvVdfVvAAAA///a2ZjsnBsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
